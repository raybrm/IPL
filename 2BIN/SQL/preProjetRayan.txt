DROP SCHEMA IF EXISTS preprojet CASCADE;
CREATE SCHEMA preprojet;

CREATE TABLE preprojet.utilisateurs (
	id_utilisateur SERIAL PRIMARY KEY,
	nom VARCHAR(100) NOT NULL CHECK (nom<>''),
	prenom VARCHAR(100) NOT NULL CHECK (prenom<>'')
	
);

CREATE TABLE preprojet.comptes (
	numero CHARACTER(10) PRIMARY KEY CHECK(numero SIMILAR TO '[0-9]{4}-[0-9]{5}'),
	id_utilisateur INTEGER REFERENCES preprojet.utilisateurs (id_utilisateur) NOT NULL
);


CREATE TABLE preprojet.operations
(
	id_operation SERIAL PRIMARY KEY,
	compte_source CHARACTER(10) REFERENCES preprojet.comptes(numero) NOT NULL,
	compte_destination CHARACTER(10) REFERENCES preprojet.comptes(numero) NOT NULL,
	date_operation TIMESTAMP NOT NULL,
	montant INTEGER NOT NULL CHECK (montant>0),
	CHECK(compte_source<>compte_destination)
);


insert :


INSERT INTO preprojet.utilisateurs VALUES (DEFAULT, 'Damas', 'Christophe');
INSERT INTO preprojet.utilisateurs VALUES (DEFAULT, 'Khaddam', 'Iyad');
INSERT INTO preprojet.utilisateurs VALUES (DEFAULT, 'Ferneeuw', 'Stéphanie');

INSERT INTO preprojet.comptes values('1234-56789', 1);
INSERT INTO preprojet.comptes values('9876-87654', 1);
INSERT INTO preprojet.comptes values('5632-12564', 2);
INSERT INTO preprojet.comptes values('1236-02364', 2);
INSERT INTO preprojet.comptes values('7896-23565', 3);

INSERT INTO preprojet.operations values(DEFAULT, '1234-56789', '5632-12564', '1/12/2006', 100);
INSERT INTO preprojet.operations values(DEFAULT, '5632-12564', '1236-02364', '2/12/2006', 120);
INSERT INTO preprojet.operations values(DEFAULT, '9876-87654', '7896-23565', '3/12/2006', 80);
INSERT INTO preprojet.operations values(DEFAULT, '7896-23565', '9876-87654', '4/12/2006', 80);
INSERT INTO preprojet.operations values(DEFAULT, '1236-02364', '7896-23565', '5/12/2006', 150);
INSERT INTO preprojet.operations values(DEFAULT, '5632-12564', '1236-02364', '6/12/2006', 120);
INSERT INTO preprojet.operations values(DEFAULT, '1234-56789', '5632-12564', '7/12/2006', 100);




Select : 


SELECT cls.nom, cls.prenom, cos.numero, cld.nom, cld.prenom, cod.numero, o.date_operation, o.montant
FROM preprojet.utilisateurs cls, preprojet.utilisateurs cld, preprojet.comptes cos, preprojet.comptes cod, preprojet.operations o
WHERE cls.id_utilisateur = cos.id_utilisateur
	AND cld.id_utilisateur = cod.id_utilisateur
	AND o.compte_source = cos.numero
	AND o.compte_destination = cod.numero


fonctions : 

CREATE OR REPLACE FUNCTION preprojet.insertTransaction (VARCHAR(100), VARCHAR(100), CHARACTER(10), VARCHAR(100), VARCHAR(100), CHARACTER(10), TIMESTAMP, INTEGER) RETURNS INTEGER AS $$ 
DECLARE
	nom_source ALIAS FOR $1 ;
	prenom_source ALIAS FOR $2;
	compte_source ALIAS FOR $3;
	nom_destination ALIAS FOR $4 ;
	prenom_destination ALIAS FOR $5;
	compte_destination ALIAS FOR $6;
	date_operation ALIAS FOR $7;
	montant_operation ALIAS FOR $8;
	id INTEGER := 0;
BEGIN 
	-- Si l'utilisateur source et son comptes n'existe pas --
	IF  NOT EXISTS (SELECT * FROM preprojet.utilisateurs u, preprojet.comptes c
				WHERE u.prenom =  prenom_source 
				AND u.nom = nom_source
				AND u.id_utilisateur = c.id_utilisateur
				AND c.numero = compte_source) THEN 
						   
		RAISE foreign_key_violation;
	END IF;	

	IF  NOT EXISTS (SELECT * FROM preprojet.utilisateurs u, preprojet.comptes c
				WHERE u.prenom =  prenom_destination 
				AND u.nom = nom_destination
				AND u.id_utilisateur = c.id_utilisateur
				AND c.numero = compte_destination) THEN 
						   
		RAISE foreign_key_violation;
	END IF;
	
	-- si on est rentré dans un des if, le code qui suit ne saura pas executer --
	-- Donc là les 2 clients existents avec leurs compte --
	INSERT INTO preprojet.operations VALUES(DEFAULT, compte_source, compte_destination, date_operation, montant_operation)
		RETURNING id_operation INTO id;
	
	RETURN id;
	
END;

$$ LANGUAGE plpgsql; 


fonctions 6 : 


CREATE OR REPLACE FUNCTION preprojet.modifierTransaction (VARCHAR(100), VARCHAR(100), CHARACTER(10), VARCHAR(100), VARCHAR(100), CHARACTER(10), TIMESTAMP, INTEGER) RETURNS INTEGER AS $$ 
DECLARE
	nom_source ALIAS FOR $1 ;
	prenom_source ALIAS FOR $2;
	compte_source ALIAS FOR $3;
	nom_destination ALIAS FOR $4 ;
	prenom_destination ALIAS FOR $5;
	compte_destination ALIAS FOR $6;
	date_operation ALIAS FOR $7;
	montant_operation ALIAS FOR $8;
	id INTEGER := 0;
BEGIN 
	-- Si l'utilisateur source et le compte sont liées --
	IF  NOT EXISTS (SELECT * FROM preprojet.utilisateurs u, preprojet.comptes c
				WHERE u.prenom =  prenom_source 
				AND u.nom = nom_source
				AND u.id_utilisateur = c.id_utilisateur
				AND c.numero = compte_source) THEN 
						   
		RAISE foreign_key_violation;
	END IF;	
	
	-- Si l'utilisateur destination et le compte sont liées --
	IF  NOT EXISTS (SELECT * FROM preprojet.utilisateurs u, preprojet.comptes c
				WHERE u.prenom =  prenom_destination 
				AND u.nom = nom_destination
				AND u.id_utilisateur = c.id_utilisateur
				AND c.numero = compte_destination) THEN 
						   
		RAISE foreign_key_violation;
	END IF;
	
	IF (1<> (SELECT COUNT(*) FROM preprojet.operations o 
			 WHERE o.compte_source = compte_source  AND o.compte_destination = compte_destination
			 AND o.date_operation = date_operation)) THEN 
		
		RAISE 'operation invalide';
	END IF;
	
	UPDATE preprojet.operations o SET montant = montant_operation 
									WHERE o.compte_source = compte_source 
									AND o.compte_destination = compte_destination
									AND o.date_operation = date_operation
									RETURNING o.id_operation INTO id;
	
	RETURN id;
	
END;

$$ LANGUAGE plpgsql; 


Fonction 7 : 


CREATE OR REPLACE FUNCTION preprojet.supprimerTransaction(nom_source VARCHAR(100), prenom_source VARCHAR(100), compte_s CHARACTER(10),
			nom_destination VARCHAR(100), prenom_destination VARCHAR(100), compte_d CHARACTER(10),date_operation TIMESTAMP, montant_operation INTEGER) RETURNS INTEGER AS $$
DECLARE
	nb INTEGER:=0;
BEGIN
	IF NOT EXISTS(SELECT * FROM preprojet.comptes c, preprojet.utilisateurs u 
			    WHERE c.numero=compte_s AND c.id_utilisateur=u.id_utilisateur 
	  		    AND u.nom=nom_source and u.prenom=prenom_source) THEN
		RAISE 'compte source invalide';
	END IF;
	IF NOT EXISTS(SELECT * FROM preprojet.comptes c, preprojet.utilisateurs u 
			    WHERE c.numero=compte_d AND c.id_utilisateur=u.id_utilisateur 
                            AND u.nom=nom_destination and u.prenom=prenom_destination) THEN
		RAISE 'compte destination invalide';
	END IF;
	SELECT COUNT(*) FROM preprojet.operations o  WHERE o.compte_source=compte_s AND o.compte_destination=compte_d AND o.date_op=date_operation AND o.montant=montant_operation INTO nb;
	IF (nb=0) THEN RAISE 'aucune opération correspondante'; END IF;
	DELETE FROM preprojet.operations o WHERE o.compte_source=compte_s AND o.compte_destination=compte_d AND o.date_op=date_operation AND o.montant=montant_operation;
	RETURN nb;
END;
$$ LANGUAGE plpgsql;

Function 8:


CREATE OR REPLACE FUNCTION preprojet.evolution(compte CHARACTER(10)) RETURNS SETOF RECORD AS $$
DECLARE
		balance INTEGER :=0;
		operation RECORD;
		avecQui CHARACTER(10);
		sortie RECORD;
BEGIN
		IF NOT EXISTS (SELECT * FROM preprojet.comptes c WHERE c.numero = compte) THEN RAISE 'compte invalide'; 
		END IF;
		FOR operation IN (SELECT* FROM preprojet.operations o WHERE o.compte_source = compte OR o.compte_destination = compte ORDER BY o.date_operation) LOOP
				IF (operation.compte_source = compte) THEN 
					avecQui := operation.compte_destination;
					balance := balance - operation.montant;
				ELSE
					avecQui := operation.compte_source;
					balance := balance + operation.montant;
				END IF;
				SELECT operation.date_operation, avecQui, balance INTO sortie;
				-- Avec Return next la fonction continue de tourner --
				RETURN NEXT sortie;
		END LOOP;
		RETURN;
END;
$$ LANGUAGE plpgsql;

SELECT * from preprojet.evolution('1234-56789') t(date_op TIMESTAMP, avecQui CHARACTER(10), balance INTEGER);

Question 9 : 

ALTER TABLE preprojet.comptes ADD COLUMN solde INTEGER;

-- Le Trigger déclenche une procédure, on dit au trigger quand lancer automatiquement cette procédure, ici ça sera lors d'un ajout d'une opération dans la table operations --

CREATE OR REPLACE FUNCTION update_solde() RETURNS TRIGGER AS $$
DECLARE
		ancien_solde INTEGER :=0;
BEGIN
		-- mise à jour du solde de la source --
		SELECT c.solde FROM preprojet.comptes c WHERE c.numero = NEW.compte_source INTO ancien_solde;
		UPDATE preprojet.comptes SET solde = ancien_solde - NEW.montant WHERE numero = NEW.compte_source;
		
		-- mise à jour du solde du destinataire --
		SELECT c.solde FROM preprojet.comptes c WHERE c.numero = NEW.compte_destination INTO ancien_solde;
		UPDATE preprojet.comptes SET solde = ancien_solde + NEW.montant WHERE numero = NEW.compte_destination;
		
		RETURN NEW;
		
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_solde_trigger AFTER INSERT ON preprojet.operations
	FOR EACH ROW EXECUTE PROCEDURE update_solde();


DELETE FROM preprojet.operations;
UPDATE preprojet.comptes SET solde=0;

INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1234-56789','5632-12564',100,'2006-12-1');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'5632-12564','1236-02364',120,'2006-12-2');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'9876-87654','7896-23565',80,'2006-12-3');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'7896-23565','9876-87654',80,'2006-12-4');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1236-02364','7896-23565',150,'2006-12-5');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'5632-12564','1236-02364',120,'2006-12-6');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1234-56789','5632-12564',100,'2006-12-7');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'9876-87654','7896-23565',80,'2006-12-8');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'7896-23565','9876-87654',80,'2006-12-9');
	
Question 10 : 

ALTER TABLE preprojet.utilisateurs ADD COLUMN balance_utilisateur INTEGER;

CREATE OR REPLACE FUNCTION update_balance () RETURNS TRIGGER AS $$
DECLARE
	record RECORD;
BEGIN
	-- mise à jour de la balance de tous les comptes de l'utilisateur source --
	SELECT u.balance_utilisateur, u.id_utilisateur FROM preprojet.comptes c, preprojet.utilisateurs u
												   WHERE c.numero = NEW.compte_source
												   AND c.id_utilisateur = u.id_utilisateur
												   INTO record;
	UPDATE preprojet.utilisateurs SET balance_utilisateur = record.balance_utilisateur - NEW.montant WHERE id_utilisateur = record.id_utilisateur;
	
	--mise à jour de la balance de tous les comptes de l'utilisateur destination --
	SELECT u.balance_utilisateur, u.id_utilisateur FROM preprojet.comptes c, preprojet.utilisateurs u
												   WHERE c.numero = NEW.compte_destination
												   AND c.id_utilisateur = u.id_utilisateur
												   INTO record;
	UPDATE preprojet.utilisateurs SET balance_utilisateur = record.balance_utilisateur + NEW.montant WHERE id_utilisateur = record.id_utilisateur;
	
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_balance_trigger AFTER INSERT ON preprojet.operations
	FOR EACH ROW EXECUTE PROCEDURE update_balance();
	
DELETE FROM preprojet.operations;
UPDATE preprojet.comptes SET solde=0;
UPDATE preprojet.utilisateurs SET balance_utilisateur=0;

INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1234-56789','5632-12564',100,'2006-12-1');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'5632-12564','1236-02364',120,'2006-12-2');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'9876-87654','7896-23565',80,'2006-12-3');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'7896-23565','9876-87654',80,'2006-12-4');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1236-02364','7896-23565',150,'2006-12-5');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'5632-12564','1236-02364',120,'2006-12-6');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'1234-56789','5632-12564',100,'2006-12-7');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'9876-87654','7896-23565',80,'2006-12-8');
INSERT INTO preprojet.operations VALUES 
	(DEFAULT,'7896-23565','9876-87654',80,'2006-12-9');

SELECT u.nom, u.prenom, u.balance_utilisateur
FROM preprojet.utilisateurs u;


		