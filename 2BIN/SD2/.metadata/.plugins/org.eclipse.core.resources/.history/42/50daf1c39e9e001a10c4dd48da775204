package comparable;

import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;


/**
 * Comparable vs Comparator
 * @author rayan
 *
 */
public class Runner {
	
	/**
	 * Comparator permet de trier en remplaçant l'ordre naturel; on peut définir plusieurs comparator tandis que comparable pas
	 * Comparator est un bon moyen quand on ne veut ou peut pas toucher au code source de la classe qu'on veut comparer.
	 * @param args
	 */
	public static void main(String[] args) {
		
		/*
		List <Laptop> laptops = new ArrayList<>();
		laptops.add(new Laptop("Dell", 16, 800));
		laptops.add(new Laptop("Apple", 8, 1200));
		laptops.add(new Laptop("Acer", 12, 700));
		
		Collections.sort(laptops); // sort prend un Type qui implements l'interface comparable
		
		for (Laptop laptop : laptops) {
			System.out.println(laptop);
		}
		
		List <String> fruits = new ArrayList<>();
		fruits.add("banane");
		fruits.add("fraise");
		fruits.add("pomme");
		
		Collections.sort(fruits);
		*/
		
		Comparator<Laptop> monComparatorSurRam = new Comparator<Laptop>() {
			
			/**
			 * Ascendant : du plus petit au plus grand
			 */
			@Override
			public int compare(Laptop lap1, Laptop lap2) {

				if (lap1.getRam() > lap2.getRam()) {
					return 1;
				} else if(lap1.getRam() == lap2.getRam()) {
					return 0;
				} else {
					return -1;
				}
			}
			
		};
		// donne sur quoi comparer et compartor.comparing extrait un objet comparator comme si nous l'avions créer nous même
		// grâce à une classe anonyme (voir plus haut) ou bien une lambda. 
		Set<Laptop> laptops = new TreeSet<Laptop>(Comparator.comparing((Laptop l1) -> l1.getRam()) );
		// même chose
		//Set<Laptop> laptps = new TreeSet<Laptop>(monComparatorSurRam);
		
		laptops.add(new Laptop("Dell", 16, 800));
		laptops.add(new Laptop("Apple", 8, 1200));
		laptops.add(new Laptop("Acer", 12, 700));
		laptops.add(new Laptop("HP", 12, 500));
		
		/*
		for (Laptop laptop : laptops) {
			System.out.println(laptop);
		}
		*/
		
		Laptop a = new Laptop("Apple", 8, 1200);
		
		PriorityQueue<Laptop> laps = new PriorityQueue<>(); // Compare grâce au comparable
		laps.add(new Laptop("Dell", 16, 800));
		laps.add(a);
		laps.add(new Laptop("Acer", 12, 700));
		laps.add(new Laptop("HP", 12, 500));
		
		for (Laptop laptop : laps) {
			System.out.println(laptop);
		}
		
		a.setRam(20);
		
		Iterator<Laptop> itr = laps.iterator();

		while(itr.hasNext()){
		  System.out.println(itr.next());
		}
		
		
	}
	
}
