import java.io.File;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class Graph {

	private LinkedList<Troncon> troncons; // list d'arcs

	//lit le fichier et remplit la structure de données troncons
	public Graph(String xmlFile) throws Exception {
	
		try {
			troncons = new LinkedList<Troncon>();
			File file = new File(xmlFile);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			
			Document document = dBuilder.parse(file);
			
			NodeList tronconsNode = document.getElementsByTagName("troncon");
			
			for (int i= 0; i < tronconsNode.getLength(); i++) {
				Node nTroncon = tronconsNode.item(i);
				Element eTroncon = (Element) nTroncon;
				String ligneDuTroncon = ((Element) nTroncon.getParentNode()).getAttribute("nom");
				String departTroncon = eTroncon.getAttribute("depart");
				String arriveeTroncon = eTroncon.getAttribute("arrivee");
				int dureeTroncon = Integer.parseInt(eTroncon.getTextContent());
				
				Troncon tr = new Troncon(ligneDuTroncon, departTroncon, arriveeTroncon, dureeTroncon);
				
				troncons.add(tr);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		System.out.println(troncons.get(2));
	}
	
	public void bfs(String depart, String arrivee) {
		Set<String> visited = new HashSet<String>();
		Queue<String> queue = new LinkedList<String>();
		Map<String,Troncon> chemin = new HashMap<String, Troncon>();
		
		queue.add(depart);
		visited.add(depart);
		while (!queue.isEmpty()) {
			String cur = queue.poll();
			//System.out.print(cur + " ");
			for (Troncon t : troncons) {
				if (t.getDepart().equals(cur) && !visited.contains(t.getArrivee())) {
					queue.add(t.getArrivee());
					visited.add(t.getArrivee());
					chemin.put(t.getArrivee(), t);
				}
			}
		}
		LinkedList<Troncon> solution = new LinkedList<Troncon>();
		
		Troncon tronconCourrant = chemin.get(arrivee);
		
		while(!tronconCourrant.getDepart().equals(depart)) {
			solution.addFirst(tronconCourrant);
			tronconCourrant = chemin.get(tronconCourrant.getDepart());
		}
		solution.addFirst(tronconCourrant);
		
		solution.forEach((x)-> {System.out.println(x.getDepart());});
	}

	public static void main(String[] args) throws Exception {
		Graph g = new Graph("stib.xml");
		g.bfs("MALIBRAN", "ALMA");
	}
}