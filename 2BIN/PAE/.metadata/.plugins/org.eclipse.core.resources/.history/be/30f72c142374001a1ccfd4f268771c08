package be.ipl.pae.main.api;

import be.ipl.pae.main.biz.dto.ClientDto;
import be.ipl.pae.main.biz.dto.DevisDto;
import be.ipl.pae.main.biz.factory.BizFactory;
import be.ipl.pae.main.exception.BizException;
import be.ipl.pae.main.exception.FatalException;
import be.ipl.pae.main.ucc.ClientUcc;
import be.ipl.pae.main.ucc.DevisUcc;

import com.owlike.genson.Genson;

import java.io.IOException;
import java.sql.Date;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import config.Inject;

public class IntroductionDevisServlet extends HttpServlet {
  @Inject
  private DevisUcc devisUcc;
  @Inject
  private ClientUcc clientUcc;
  @Inject
  private BizFactory bizFactory;


  public IntroductionDevisServlet() {}

  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    System.out.println("Appel au servlet IntroductionDevisServlet");
    String json = "";



    try {
      String token = req.getHeader("authorization");
      if (Utils.verifyToken(token) == null) {
        Utils.replyWithWrongTokenError(resp, token);
        return; // stop la requete si token pas valable
      }

      Genson genson = new Genson();
      Map<String, Object> parametresRequete = genson.deserialize(req.getReader(), HashMap.class);

      // Recuperation de la liste des types d amenagements
      ArrayList<Object> listeAmenagement =
          (ArrayList<Object>) parametresRequete.get("liste_amenagement");
      String listeSerialise = genson.serialize(listeAmenagement);
      ArrayList<String> listeIdAmenagement = genson.deserialize(listeSerialise, ArrayList.class);

      // Liste d amenagement
      int[] tabIdTypeAmenagement = new int[listeIdAmenagement.size()];
      for (int i = 0; i < listeIdAmenagement.size(); i++) {
        tabIdTypeAmenagement[i] = Integer.parseInt(listeIdAmenagement.get(i).toString());
      }

      // Donnees recuperee
      String nom = parametresRequete.get("nom").toString();
      Date dateDevis = recupererDateDevis(parametresRequete);
      double montant = recupererMontantTotal(parametresRequete);
      int dureeTravaux = recupererDureeTravaux(parametresRequete);
      String emailClient = parametresRequete.get("email").toString();
      String typeAjout = parametresRequete.get("ajout").toString();

      // Le client existe deja en db mais on verifie quand meme
      ClientDto client = bizFactory.getClient();
      if (typeAjout.equals("manuel")) {
        client.setEmail(emailClient);
        if (clientUcc.existe(client) == null) {
          json += "{\"success\":\"false\",\"message\":\"client non existant\"";
          json += "}";
          Utils.replyAsError(resp, HttpServletResponse.SC_CONFLICT, json, "client non existant");
          return;
        }
      }
      DevisDto devisDto = bizFactory.getDevis();
      devisDto.setDureeTravaux(dureeTravaux);
      devisDto.setMontantTotal(montant);
      devisDto.setDateDevis(dateDevis);
      devisDto.setIdClient(client.getIdClient());

      // introduction du devis
      devisUcc.introduireDevis(devisDto, tabIdTypeAmenagement);

      json += "{\"success\":\"true\",\"message\":\"ajout reussi\"";
      json += "}";
      Utils.replyAsSuccess(resp, json, "Ajout du devis reussi");

    } catch (ParseException e) {
      System.out.println("parsing date error");
    } catch (BizException e) {
      Utils.replyAsError(resp, HttpServletResponse.SC_CONFLICT, e.getMessage(), e.getMessage());
      return;
    } catch (FatalException exception) {
      Utils.replyAsError(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, exception.getMessage(),
          "erreur Serveur - DB");
    }

  }

  private double recupererMontantTotal(Map<String, Object> parametresRequete) {
    return Double.parseDouble(parametresRequete.get("montant_total_devis").toString());
  }

  private int recupererDureeTravaux(Map<String, Object> parametresRequete) {
    return Integer.parseInt(parametresRequete.get("duree_travaux").toString());
  }

  private Date recupererDateDevis(Map<String, Object> parametresRequete) throws ParseException {
    String dateDevis = parametresRequete.get("date_devis").toString();
    Date date = Date.valueOf(dateDevis);
    return date;
  }

}
