package be.ipl.pae.main.dao;

import be.ipl.pae.main.exception.DatabaseException;

import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnection;
import org.apache.commons.dbcp2.PoolableConnectionFactory;
import org.apache.commons.dbcp2.PoolingDataSource;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import config.InjectionService;


public class DalServicesImpl implements DalServices, DalServivesDbManager {

  private static Map<QueryNamesEnum, PreparedStatement> psMap =
      new ConcurrentHashMap<QueryNamesEnum, PreparedStatement>();

  // Retient la connexion utilise dans son thread
  private static ThreadLocal<Connexion> threadLocalConn = new ThreadLocal<>();

  // Retient les connexions
  private PoolingDataSource<PoolableConnection> dataSource;

  private void initProperties() {

    ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(
        InjectionService.getPropsData("db_conn.properties", "url_db"),
        InjectionService.getPropsData("db_conn.properties", "pseudo_db"),
        InjectionService.getPropsData("db_conn.properties", "mot_de_passe_db"));

    PoolableConnectionFactory poolableConnectionFactory =
        new PoolableConnectionFactory(connectionFactory, null);

    ObjectPool<PoolableConnection> connectionPool =
        new GenericObjectPool<>(poolableConnectionFactory);

    poolableConnectionFactory.setPool(connectionPool);

    dataSource = new PoolingDataSource<>(connectionPool);
  }

  public DalServicesImpl() {

    try {
      Class.forName("org.postgresql.Driver");
    } catch (ClassNotFoundException exception) {
      System.out.println("Driver PostgreSQL not found");
      System.exit(1);
    }

    initProperties();
  }

  @Override
  public PreparedStatement getPreparedStatement(String query) {

    PreparedStatement ps;
    try {
      ps = threadLocalConn.get().getConnection().prepareStatement(query);
      System.out.println(ps);
      return ps;
    } catch (SQLException exc) {
      throw new DatabaseException(exc);
    }
  }


  @Override
  public void startTransaction() throws DatabaseException {
    System.out.println("");
    if (threadLocalConn.get() == null) {
      threadLocalConn.set(new Connexion());
      try {
        threadLocalConn.get().setConnection(dataSource.getConnection());
      } catch (SQLException exc) {
        throw new DatabaseException(exc);
      }
    }

    try {
      // desactive les commit directement apres une execution d'une query
      threadLocalConn.get().getConnection().setAutoCommit(false);
    } catch (SQLException exc) {
      throw new DatabaseException(exc);
    }
  }

  @Override
  public void commit() throws DatabaseException {
    try {
      threadLocalConn.get().getConnection().commit();
      threadLocalConn.get().getConnection().setAutoCommit(true);
      threadLocalConn.get().getConnection().close();
      threadLocalConn.set(null);
    } catch (SQLException exc) {
      throw new DatabaseException(exc);
    }
  }

  /**
   * Rollback sur la connexion entiere
   * 
   * @throws DatabaseException
   */
  @Override
  public void rollback() throws DatabaseException {
    try {
      threadLocalConn.get().getConnection().rollback();
    } catch (SQLException exc) {
      throw new DatabaseException(exc);
    }

  }

  private static class Connexion {

    private Connection connection;

    public void setConnection(Connection connection) {
      this.connection = connection;
    }

    public Connection getConnection() {
      return connection;
    }
  }
}
