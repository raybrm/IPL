package be.ipl.pae.main.dao;


import be.ipl.pae.main.biz.dto.ClientDto;
import be.ipl.pae.main.exception.FatalException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import config.Inject;


public class ClientDaoImpl implements ClientDao {

  @Inject
  private DalServices dalS;



  public ClientDaoImpl() {}

  @Override
  public ArrayList<ClientDto> getClients(ClientDto client) {

    ArrayList<ClientDto> listeClients = new ArrayList<ClientDto>();

    PreparedStatement ps = dalS.getPreparedStatement("SELECT * FROM clients");

    try (ResultSet res = ps.executeQuery()) {
      while (res.next()) {
        ClientDto clientDto = client.clone();
        clientDto.setIdClient(res.getInt(1));
        clientDto.setNom(res.getString(2));
        clientDto.setPrenom(res.getString(3));
        clientDto.setVille(res.getString(4));
        clientDto.setCodePostal(res.getInt(5));
        clientDto.setRue(res.getString(6));
        clientDto.setNumero(res.getInt(7));
        clientDto.setBoite(res.getString(8));
        clientDto.setTelephone(res.getString(9));
        clientDto.setEmail(res.getString(10));

        listeClients.add(clientDto.clone());
      }
      return listeClients;

    } catch (SQLException exception) {
      throw new FatalException(exception);
    }

  }

  @Override
  public ClientDto inscrire(ClientDto clientDto) {
    PreparedStatement ps = dalS.getPreparedStatement("INSERT INTO clients "
        + "(nom, prenom, ville, code_postal, rue, numero, boite, telephone, email )"
        + "VALUES(?,?,?,?,?,?,?,?,?) RETURNING id_client");
    
    System.out.println(clientDto.getTelephone());
    try {
      ps.setString(1, clientDto.getNom());
      ps.setString(2, clientDto.getPrenom());
      ps.setString(3, clientDto.getVille());
      ps.setInt(4, clientDto.getCodePostal());
      ps.setString(5, clientDto.getRue());
      ps.setInt(6, clientDto.getNumero());
      ps.setString(7, clientDto.getBoite());

    } catch (SQLException excpetion) {
      throw new FatalException(excpetion);
    }

    // Execute la requete
    try (ResultSet result = ps.executeQuery()) {
      if (result.next()) {
        clientDto.setIdClient(result.getInt(1));
      }
    } catch (SQLException excpetion) {
      throw new FatalException(excpetion);
    }

    return clientDto;
  }

  @Override
  public ClientDto inscrireWithoutBoite(ClientDto clientDto) throws FatalException {
    PreparedStatement ps = dalS.getPreparedStatement(
        "INSERT INTO clients " + "(nom, prenom, ville, code_postal, rue, numero, email, telephone )"
            + "VALUES(?,?,?,?,?,?,?,?) RETURNING id_client");

    try {
      ps.setString(1, clientDto.getNom());
      ps.setString(2, clientDto.getPrenom());
      ps.setString(3, clientDto.getVille());
      ps.setInt(4, clientDto.getCodePostal());
      ps.setString(5, clientDto.getRue());
      ps.setInt(6, clientDto.getNumero());
      ps.setString(7, clientDto.getTelephone());
      ps.setString(8, clientDto.getEmail());


    } catch (SQLException excpetion) {
      throw new FatalException("Preparation de la requete impossible");
    }

    // Execute la requete
    try (ResultSet result = ps.executeQuery()) {
      if (result.next()) {
        clientDto.setIdClient(result.getInt(1));
      }
    } catch (SQLException excpetion) {
      throw new FatalException("Execution de la requete impossible");
    }

    return clientDto;
  }

  @Override
  public ClientDto existe(ClientDto clientDto) {
    PreparedStatement ps =
        dalS.getPreparedStatement("SELECT c.* FROM clients c WHERE c.email like ? ");

    try {
      ps.setString(1, clientDto.getEmail());
      ResultSet res = ps.executeQuery();
      if (res.next()) {
        clientDto.setIdClient(res.getInt(1));
        clientDto.setNom(res.getString(2));
        clientDto.setPrenom(res.getString(3));
        clientDto.setVille(res.getString(4));
        clientDto.setCodePostal(res.getInt(5));
        clientDto.setRue(res.getString(6));
        clientDto.setNumero(res.getInt(7));
        clientDto.setBoite(res.getString(8));
        clientDto.setTelephone(res.getString(9));
        clientDto.setEmail(res.getString(10));
        return clientDto;
      } else {
        return null;
      }

    } catch (SQLException exception) {
      throw new FatalException(exception);
    }

  }

  @Override
  public ArrayList<ClientDto> getClientsSansUtilisateurs(ClientDto client) {
    ArrayList<ClientDto> listeClients = new ArrayList<ClientDto>();

    PreparedStatement ps = dalS.getPreparedStatement("SELECT DISTINCT c.* FROM clients c\n"
        + "WHERE c.id_client NOT IN (SELECT u.id_client from utilisateurs u WHERE u.type != 'O' AND u.id_client IS NOT NULL)");

    try (ResultSet res = ps.executeQuery()) {
      while (res.next()) {
        ClientDto clientDto = client.clone();
        clientDto.setIdClient(res.getInt(1));
        clientDto.setNom(res.getString(2));
        clientDto.setPrenom(res.getString(3));
        clientDto.setVille(res.getString(4));
        clientDto.setCodePostal(res.getInt(5));
        clientDto.setRue(res.getString(6));
        clientDto.setNumero(res.getInt(7));
        clientDto.setBoite(res.getString(8));
        clientDto.setTelephone(res.getString(9));
        clientDto.setEmail(res.getString(10));

        listeClients.add(clientDto.clone());
      }
      return listeClients;

    } catch (SQLException exception) {
      throw new FatalException(exception);
    }
  }



}
