package be.ipl.pae.main.ucc;

import static utils.CheckUtils.checkObject;
import static utils.CheckUtils.checkString;
import java.util.ArrayList;
import be.ipl.pae.main.api.InjectionService;
import be.ipl.pae.main.biz.TypeUtilisateurEnum;
import be.ipl.pae.main.biz.dto.UtilisateurDto;
import be.ipl.pae.main.biz.factory.UtilisateurFactory;
import be.ipl.pae.main.biz.impl.UtilisateurImpl;
import be.ipl.pae.main.dao.UtilisateurDao;
import be.ipl.pae.main.dao.UtilisateurDaoImpl;
import be.ipl.pae.main.exception.CompteNonActiveeException;
import be.ipl.pae.main.exception.EmailDejaExistantException;
import be.ipl.pae.main.exception.PseudoDejaExistantException;

public class UtilisateurUccImpl implements UtilisateurUcc {

  private UtilisateurDao utilisateurDao;

  private UtilisateurFactory factory =
      InjectionService.getDependency(UtilisateurFactory.class, "prod.properties");

  /**
   * recupere une instance de UtilisateurDao.
   */
  public UtilisateurUccImpl() {
    this.utilisateurDao = new UtilisateurDaoImpl(factory.getUtilisateur());
  }

  @Override
  public UtilisateurDto seConnecter(String pseudo, String motDePasse)
      throws CompteNonActiveeException {
    checkObject(pseudo);
    checkObject(motDePasse);
    checkString(pseudo);
    checkString(motDePasse);
    String motDePasseRetourne = utilisateurDao.getUtilisateurMotDePasse(pseudo);
    // compte inexistant
    if (motDePasseRetourne == null) {
      return null;
    }

    if (UtilisateurImpl.checkMotDePasseCrypte(motDePasse, motDePasseRetourne)) {
      System.out.println("Mot de passe correct !");

      UtilisateurDto utilisateur = utilisateurDao.getUtilisateur(pseudo);

      // Verifie si le compte est un utilisateur active
      if (!utilisateur.getType().equals(TypeUtilisateurEnum.O)) {
        boolean estUnCompteActivee = utilisateurDao.estCompteActivee(pseudo);
        if (!estUnCompteActivee) {
          throw new CompteNonActiveeException(pseudo + " est un compte non active");
        }
      }
      return utilisateur;
    }
    return null;

  }

  @Override
  public UtilisateurDto getUtilisateur(String pseudo) {
    checkObject(pseudo);
    checkString(pseudo);
    return utilisateurDao.getUtilisateur(pseudo);
  }

  @Override
  public UtilisateurDto inscrireUtilisateur(UtilisateurDto utilisateurDTO)
      throws PseudoDejaExistantException, EmailDejaExistantException {

    UtilisateurImpl utilisateur = (UtilisateurImpl) utilisateurDTO; // à quoi sert cet objet ????

    if (!utilisateurDao.pseudoEstUnique(utilisateurDTO.getPseudo())) {
      System.out.println("Pseudo Deja existant : " + utilisateur.getPseudo());
      throw new PseudoDejaExistantException("Pseudo Deja existant");
    }
    if (!utilisateurDao.emailExistePas(utilisateurDTO.getEmail())) {
      System.out.println("Email deja existant : " + utilisateur.getEmail());
      throw new EmailDejaExistantException("Email deja existant");
    }
    utilisateur.setMot_de_passe(UtilisateurImpl.crypterMotDePasse(utilisateurDTO.getMot_de_passe()));
    return utilisateurDao.inscrire(utilisateurDTO);
  }

  @Override
  public ArrayList<UtilisateurDto> getUtilisateurs() {
    ArrayList<UtilisateurDto> listeUtilisateur = utilisateurDao.getUtilisateurs();
    if (listeUtilisateur == null) {
      System.out.println("pas de devis pour ce client");
      return null;
    }
    return listeUtilisateur;

  }



}

