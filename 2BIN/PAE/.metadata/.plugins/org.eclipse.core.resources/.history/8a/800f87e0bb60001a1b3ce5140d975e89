package be.ipl.pae.main.api;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.rmi.CORBA.Util;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.auth0.jwt.JWTCreator.Builder;
import com.owlike.genson.Genson;
import UCC.UtilisateurUCC;
import UCC.UtilisateurUCCImpl;
import data.object.BizFactory;
import data.object.utilisateur.UtilisateurDTO;

public class LoginServlet extends HttpServlet {
  private BizFactory factory;
  private UtilisateurUCC utilisateurUcc = new UtilisateurUCCImpl();

  public LoginServlet(BizFactory factory) {
    this.factory = factory;

  }
  
  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) 
      throws ServletException, IOException {
    
    try {
      
      System.out.println("Appel au servlet Login");
      Genson genson = new Genson();
      Map<String , String> map = genson.deserialize(req.getReader(), HashMap.class);
      System.out.println(map.get("pseudo") + " souhaite se connecter");
      
      // on r√©cup√®re l'objet DTO
      UtilisateurDTO utilisateur = null;
      utilisateur = utilisateurUcc.checkCompte(map.get("pseudo"), map.get("mot_de_passe"));
      
      // Par d√©faut
      String returnJson = "{\"success\":\"false\", \"message\":\"Pas d'utilisateur correspondant.\"}";
      int HttpCode = HttpServletResponse.SC_UNAUTHORIZED;
      
      // Verification qu'il existe un utilisateur
      if (utilisateur != null) {
        System.out.println(utilisateur.getPseudo());
        // Creation du token pour le renvoyer a† l'utilisateur
        Builder tokenBuilder = Utils.createToken();
        Map<String, Object> claims = new HashMap<String, Object>();
        
        tokenBuilder.withClaim("id", utilisateur.getId_utilisateur());
        tokenBuilder.withClaim("pseudo", utilisateur.getPseudo());
        tokenBuilder.withClaim("email", utilisateur.getEmail());
        tokenBuilder.withClaim("nom", utilisateur.getNom());
        tokenBuilder.withClaim("prenom", utilisateur.getPrenom());
        tokenBuilder.withClaim("ip", req.getRemoteAddr());
        
        String token = tokenBuilder.sign(Utils.algorithm);
        System.out.println("token generer :"+ token);
        
        returnJson = "{" + 
                     "\"success\":\"true\", " +
                     "\"data\": {" +
                         "\"token\": \"" + token + "\" , " + 
                         "\"user\": {" +
                           "\"pseudo\":\"" + utilisateur.getPseudo() + "\", " +
                           "\"name\": \"" + utilisateur.getNom() + "\", " +
                           "\"firstname\": \"" + utilisateur.getPrenom() + "\", " +
                           "\"email\": \"" + utilisateur.getEmail() + "\", " +
                     "}" +
                 "}" +
             "}";
        HttpCode = HttpServletResponse.SC_OK;
     
        
      } else {
        System.out.println("Utilisateur non reconnu");
      }
      
      // Envoie de la r√©ponse 
      System.out.println("JSON retourner: " + returnJson);
      resp.setContentType("application/json");
      resp.setCharacterEncoding("UTF-8");
      resp.setStatus(HttpCode);
      resp.getWriter().write(returnJson);
      
    } catch (Exception exception) {
      exception.printStackTrace();
      String json = "{\"success\":\"false\", \"error\":";
      json += exception.getMessage();
      json += "}";
      resp.setContentType("application/json");
      resp.setCharacterEncoding("UTF-8");
      resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      resp.getWriter().write(json);
    }	
  }
}